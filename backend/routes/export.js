const express = require("express");
const router = express.Router();
const Product = require("../models/productModel");
const Report = require("../models/reportModel");
const User = require("../models/userModel");
const nodemailer = require("nodemailer");
const PDFDocument = require("pdfkit");
const XLSX = require("xlsx");
const { Readable } = require("stream");

// Configure nodemailer
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Helper function to convert buffer to stream
const bufferToStream = (buffer) => {
  const stream = new Readable();
  stream.push(buffer);
  stream.push(null);
  return stream;
};

// Export products to PDF using PDFKit
router.post("/export/pdf", async (req, res) => {
  try {
    const { userId, email, includeImages = false } = req.body;

    const user = await User.findById(userId);
    const products = await Product.find({ userId }).sort({ createdAt: -1 });

    if (!user || products.length === 0) {
      return res.status(404).json({ error: "No data found" });
    }

    // Create PDF document
    const doc = new PDFDocument({
      size: "A4",
      margin: 50,
      bufferPages: true,
    });

    const fileName = `products-report-${Date.now()}.pdf`;

    // Collect PDF data in memory
    const chunks = [];
    doc.on("data", (chunk) => chunks.push(chunk));

    // Header
    doc.fillColor("#00BFFF").fontSize(24).text("TransparentAI", 50, 50);
    doc.fillColor("#000000").fontSize(18).text("Products Report", 50, 85);

    // User info
    doc
      .fontSize(12)
      .text(`Generated for: ${user.name}`, 50, 120)
      .text(`Email: ${user.email}`, 50, 140)
      .text(`Company: ${user.company}`, 50, 160)
      .text(`Generated on: ${new Date().toLocaleDateString()}`, 50, 180)
      .text(`Total Products: ${products.length}`, 50, 200);

    // Line separator
    doc.moveTo(50, 220).lineTo(550, 220).strokeColor("#00BFFF").stroke();

    // Table headers
    const tableHeaders = ["#", "Product", "Company", "Created", "Attributes"];
    const columnPositions = [50, 100, 250, 400, 500];
    let yPosition = 240;

    // Header row
    doc.font("Helvetica-Bold");
    tableHeaders.forEach((header, i) => {
      doc.text(header, columnPositions[i], yPosition);
    });

    // Table rows
    doc.font("Helvetica");
    products.forEach((product, index) => {
      yPosition += 25;

      const rowData = [
        index + 1,
        product.name,
        product.companyName,
        new Date(product.createdAt).toLocaleDateString(),
        Object.keys(product.attributes || {}).length,
      ];

      rowData.forEach((cell, i) => {
        doc.text(cell.toString(), columnPositions[i], yPosition);
      });

      // Add horizontal line
      doc
        .moveTo(50, yPosition + 15)
        .lineTo(550, yPosition + 15)
        .strokeColor("#CCCCCC")
        .stroke();
    });

    // Footer
    doc
      .fontSize(10)
      .fillColor("#808080")
      .text("Generated by TransparentAI", 50, 750, { align: "left" })
      .text(`Page 1 of 1`, 50, 750, { align: "right" });

    // Finalize PDF
    doc.end();

    // Wait for PDF to finish
    const pdfBuffer = await new Promise((resolve) => {
      doc.on("end", () => {
        const buffer = Buffer.concat(chunks);
        resolve(buffer);
      });
    });

    // Create report record without file path
    const report = new Report({
      userId,
      products: products.map((p) => p._id),
      reportType: "pdf",
      fileName,
      status: "completed",
    });

    // Send email if requested
    if (email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: "Your Products Report - TransparentAI",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #00BFFF, #1E90FF); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">TransparentAI</h1>
              <p style="color: white; margin: 5px 0;">Products Report</p>
            </div>
            <div style="padding: 20px; background: #f9f9f9;">
              <h2>Hello ${user.name},</h2>
              <p>Your products report has been generated successfully!</p>
              <p><strong>Report Details:</strong></p>
              <ul>
                <li>Total Products: ${products.length}</li>
                <li>Generated on: ${new Date().toLocaleDateString()}</li>
                <li>Format: PDF</li>
              </ul>
              <p>Please find your report attached to this email.</p>
              <p>Best regards,<br>TransparentAI Team</p>
            </div>
          </div>
        `,
        attachments: [
          {
            filename: fileName,
            content: pdfBuffer,
          },
        ],
      };

      await transporter.sendMail(mailOptions);
      report.emailSent = true;
      report.sentToEmail = email;
    }

    await report.save();

    // Send response with download option
    res.set({
      "Content-Type": "application/pdf",
      "Content-Disposition": `attachment; filename=${fileName}`,
      "Content-Length": pdfBuffer.length,
    });
    res.send(pdfBuffer);
  } catch (err) {
    console.error("Export PDF error:", err);
    res.status(500).json({ error: err.message });
  }
});

// Export products to Excel
router.post("/export/excel", async (req, res) => {
  try {
    const { userId, email } = req.body;

    const user = await User.findById(userId);
    const products = await Product.find({ userId }).sort({ createdAt: -1 });

    if (!user || products.length === 0) {
      return res.status(404).json({ error: "No data found" });
    }

    // Create workbook
    const workbook = XLSX.utils.book_new();

    // Products sheet
    const productsData = products.map((product, index) => ({
      "S.No": index + 1,
      "Product Name": product.name,
      Company: product.companyName,
      Description: product.description || "N/A",
      "Created Date": new Date(product.createdAt).toLocaleDateString(),
      "Attributes Count": Object.keys(product.attributes || {}).length,
      "Image URL": product.imageUrl || "N/A",
    }));

    const productsSheet = XLSX.utils.json_to_sheet(productsData);
    XLSX.utils.book_append_sheet(workbook, productsSheet, "Products");

    // Summary sheet
    const companies = [...new Set(products.map((p) => p.companyName))];
    const summaryData = [
      { Metric: "Total Products", Value: products.length },
      { Metric: "Total Companies", Value: companies.length },
      { Metric: "Report Generated", Value: new Date().toLocaleDateString() },
      { Metric: "User Name", Value: user.name },
      { Metric: "User Email", Value: user.email },
    ];

    const summarySheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, "Summary");

    const fileName = `products-report-${Date.now()}.xlsx`;

    // Generate Excel file in memory
    const excelBuffer = XLSX.write(workbook, {
      type: "buffer",
      bookType: "xlsx",
    });

    // Create report record without file path
    const report = new Report({
      userId,
      products: products.map((p) => p._id),
      reportType: "excel",
      fileName,
      status: "completed",
    });

    // Send email if requested
    if (email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: "Your Products Report (Excel) - TransparentAI",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #00BFFF, #1E90FF); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">TransparentAI</h1>
              <p style="color: white; margin: 5px 0;">Products Report (Excel)</p>
            </div>
            <div style="padding: 20px; background: #f9f9f9;">
              <h2>Hello ${user.name},</h2>
              <p>Your Excel products report has been generated successfully!</p>
              <p><strong>Report Details:</strong></p>
              <ul>
                <li>Total Products: ${products.length}</li>
                <li>Generated on: ${new Date().toLocaleDateString()}</li>
                <li>Format: Excel (.xlsx)</li>
                <li>Sheets: Products, Summary</li>
              </ul>
              <p>Please find your report attached to this email.</p>
              <p>Best regards,<br>TransparentAI Team</p>
            </div>
          </div>
        `,
        attachments: [
          {
            filename: fileName,
            content: excelBuffer,
          },
        ],
      };

      await transporter.sendMail(mailOptions);
      report.emailSent = true;
      report.sentToEmail = email;
    }

    await report.save();

    // Send response with download option
    res.set({
      "Content-Type":
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      "Content-Disposition": `attachment; filename=${fileName}`,
      "Content-Length": excelBuffer.length,
    });
    res.send(excelBuffer);
  } catch (err) {
    console.error("Export Excel error:", err);
    res.status(500).json({ error: err.message });
  }
});

// Get export history
router.get("/export/history/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const reports = await Report.find({ userId })
      .populate("products", "name")
      .sort({ createdAt: -1 });

    res.json(reports);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;
